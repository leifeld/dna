% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rDNA.R
\name{dna_tidygraph}
\alias{dna_tidygraph}
\title{Convert a DNA network into a \code{tbl_graph} or \code{graph} object}
\usage{
dna_tidygraph(network, attributes = NULL, ...)
}
\arguments{
\item{network}{A \code{dna_network_onemode} or \code{dna_network_twomode}
object to be converted into a \code{tbl_graph} object. Can also be a matrix
with edge weights and row and column names for the node labels.}

\item{attributes}{A \code{dna_attributes} object created using the
\link{dna_getAttributes} function with attributes for the nodes in the
network. Can also be a data frame with a \code{values} column that contains
the node labels and further columns containing the attributes. The
attributes are saved as node attributes in the \code{tbl_graph} object. If
\code{NULL}, no attributes are included.}

\item{...}{Further arguments. Currently not in use.}
}
\description{
Convert a DNA network into a \code{tbl_graph} or \code{graph} object.
}
\details{
Convert a \code{dna_network_onemode} or \code{dna_network_twomode} object
into a \code{tbl_graph} object as defined in the tidygraph package. These
objects can then be plotted using the ggraph package, which contains many
network layouts.

\code{tbl_graph} objects are an extension of \code{graph}
objects defined in the igraph package. Functions for manipulating or plotting
the resulting objects from either the tidygraph or igraph package or both
can be used.

The resulting objects can also be converted to \code{network} objects as
defined in the network package (part of the statnet suite of packages) using
the \code{asNetwork} function in the intergraph package.
}
\examples{
\dontrun{
# prepare toy data
dna_sample()
dna_openDatabase("sample.dna", coderPassword = "sample")
nw <- dna_network(networkType = "onemode",
                  qualifierAggregation = "congruence",
                  excludeValues = list(concept =
                    "There should be legislation to regulate emissions."))
at <- dna_getAttributes(variableId = 2)

# convert to tbl_graph object
g <- dna_tidygraph(nw, at)

# basic visualization
ggraph::ggraph(g, layout = "fr") +
  ggraph::geom_edge_link() +
  ggraph::geom_node_point()

# visualization with more bells and whistles
ggraph::ggraph(g, layout = "graphopt") +
  ggraph::geom_edge_link(ggplot2::aes(color = weight, width = weight)) +
  ggraph::geom_node_point(ggplot2::aes(color = color), size = 5) +
  ggplot2::scale_color_identity() +
  ggraph::scale_edge_color_gradient(low = "azure2", high = "azure4") +
  ggraph::theme_graph(background = "white") +
  ggraph::geom_node_text(ggplot2::aes(label = name),
                         repel = TRUE,
                         max.overlaps = 10,
                         show.legend = FALSE)
# for more layouts, see vignette("Layouts", package = "ggraph")

# hive plot example
g <- g |>
  tidygraph::activate(nodes) |>
  tidygraph::mutate(centrality = tidygraph::centrality_betweenness())
ggraph::ggraph(g, layout = "hive", axis = Type, sort.by = centrality) +
  ggraph::geom_edge_hive(ggplot2::aes(colour = "gray", width = weight)) +
  ggraph::geom_axis_hive(ggplot2::aes(colour = color),
                                      size = 5,
                                      label = TRUE) +
  ggraph::scale_edge_color_identity() +
  theme(legend.position = "none")

# example with negative edge weights
nw <- dna_network(networkType = "onemode",
                  qualifierAggregation = "subtract",
                  excludeValues = list(concept =
                    "There should be legislation to regulate emissions."))
g <- dna_tidygraph(nw, at)
ggraph::ggraph(g, layout = "linear", circular = TRUE) +
  ggraph::geom_edge_arc(aes(color = color, width = abs)) +
  ggraph::scale_edge_color_identity() +
  ggraph::geom_node_point(ggplot2::aes(color = color), size = 5) +
  ggplot2::scale_color_identity() +
  ggraph::theme_graph(background = "white") +
  theme(legend.position = "none") +
  ggraph::geom_node_text(ggplot2::aes(label = name),
                         repel = TRUE,
                         max.overlaps = 10,
                         show.legend = FALSE)

# example with a two-mode network
nw <- dna_network(networkType = "twomode",
                  qualifierAggregation = "combine")
at1 <- dna_getAttributes(statementTypeId = 1, variable = "organization")
at2 <- dna_getAttributes(statementTypeId = 1, variable = "concept")
at1$Notes <- "organization"
at2$Notes <- "concept"
at <- rbind(at1, at2)
g <- dna_tidygraph(nw, at)
ggraph::ggraph(g, layout = "graphopt") +
  ggraph::geom_edge_link(ggplot2::aes(color = color), width = 1) +
  ggraph::scale_edge_color_identity() +
  ggraph::geom_node_point(ggplot2::aes(color = color, shape = Notes),
                          size = 5) +
  ggplot2::scale_color_identity() +
  ggraph::geom_node_text(ggplot2::aes(label = name),
                         repel = TRUE,
                         max.overlaps = 10,
                         show.legend = FALSE) +
  ggraph::theme_graph(background = "white") +
  theme(legend.position = "none")

# manipulate and plot using the igraph package
library("igraph")
class(g) # resulting objects are both tbl_graph and igraph objects
igraph::V(g) # get the nodes using igraph functions
igraph::E(g) # get the edges using igraph functions
igraph::plot(g) # plot network using igraph package

# convert to network object (network package, statnet suite of packages)
library("intergraph")
intergraph::asNetwork(g)
}

}
\seealso{
Other networks: 
\code{\link{as.matrix.dna_network_onemode}()},
\code{\link{as.matrix.dna_network_twomode}()},
\code{\link{autoplot.dna_network}},
\code{\link{dna_network}()},
\code{\link{print.dna_network_onemode}()},
\code{\link{print.dna_network_twomode}()}
}
\author{
Philip Leifeld
}
\concept{networks}
