% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rDNA.R
\name{autoplot.dna_network}
\alias{autoplot.dna_network}
\alias{autoplot.dna_network_onemode}
\alias{autoplot.dna_network_twomode}
\title{Plot networks created using rDNA.}
\usage{
\method{autoplot}{dna_network_onemode}(
  object,
  ...,
  atts = NULL,
  layout = "auto",
  edge_size_range = c(0.2, 2),
  edge_color = NULL,
  edge_alpha = 1,
  node_size = 3,
  node_colors = "black",
  node_label = TRUE,
  font_size = 6,
  truncate = 50,
  threshold = NULL,
  giant_component = FALSE,
  exclude_isolates = FALSE,
  max_overlaps = 10,
  seed = 12345
)

\method{autoplot}{dna_network_twomode}(
  object,
  ...,
  atts = NULL,
  layout = "auto",
  edge_size_range = c(0.2, 2),
  edge_color = NULL,
  edge_alpha = 1,
  node_size = 3,
  node_colors = "black",
  node_label = TRUE,
  font_size = 6,
  truncate = 50,
  threshold = NULL,
  giant_component = FALSE,
  exclude_isolates = FALSE,
  max_overlaps = 10,
  seed = 12345
)
}
\arguments{
\item{object}{A \code{dna_network} object.}

\item{...}{Additional arguments; currently not in use.}

\item{atts}{A \code{dna_attributes} object generated by
\code{\link{dna_getAttributes}}. Provide this object and matching
attributes when plotting custom node colors, node labels and/or node sizes.}

\item{layout}{The type of node layout to use. The following layouts are
available from the \code{igraph} and \code{ggraph} packages at the time of
writing:
\itemize{
 \item \code{"stress"} (the default layout)
 \item \code{"bipartite"} (only for two-mode networks)
 \item \code{"backbone"}
 \item \code{"circle"}
 \item \code{"dh"}
 \item \code{"drl"}
 \item \code{"fr"}
 \item \code{"gem"}
 \item \code{"graphopt"}
 \item \code{"kk"}
 \item \code{"lgl"}
 \item \code{"mds"}
 \item \code{"nicely"}
 \item \code{"randomly"}
 \item \code{"star"}
}
See \link[ggraph]{layout_tbl_graph_igraph} for the current list of layouts.}

\item{edge_size_range}{Two values indicating the minimum and maximum value
to scale edge widths.}

\item{edge_color}{Provide the name of a color for edge colors. The default
\code{"NULL"} colors edges in line with the specified
\code{qualifierAggregation} in \code{\link{dna_network}}.}

\item{edge_alpha}{Takes numeric values to control the alpha-transparency of
edges. Possible values range from \code{0} (fully transparent) to \code{1}
(fully visible).}

\item{node_size}{Takes positive numeric values to control the size of nodes.
Also accepts numeric values matching an attribute of the \code{atts} object
(see examples).}

\item{node_colors}{Provide the name of a color or use an attribute from the
\code{atts} object for node colors (see examples). Defaults to
\code{"black"}.}

\item{node_label}{If \code{TRUE}, the row names (in a one-mode network) or
the row and column names (in a two-mode network) of the network matrix are
used for node labels. Also accepts character objects matching one of the
attribute variables of the \code{atts} object (see examples). \code{FALSE}
turns off node labels.}

\item{font_size}{Controls the font size of the node labels.}

\item{truncate}{Sets the number of characters to which node labels should be
truncated.}

\item{threshold}{Minimum threshold for which edges should be plotted.}

\item{giant_component}{Only plot the giant component (the biggest connected
cluster) of the network. Defaults to \code{FALSE}.}

\item{exclude_isolates}{Exclude isolates (nodes with no connection to other
nodes) from the plot. Defaults to \code{FALSE}.}

\item{max_overlaps}{Value to exclude node labels that overlap with too many
other node labels (see \code{\link[ggrepel]{geom_label_repel}}. Defaults
to \code{10}.}

\item{seed}{Numeric value passed to \link{set.seed}. Ensures that plots are
reproducible.}
}
\description{
Plot a network generated using \code{\link{dna_network}}.
}
\details{
These functions plot \code{dna_network_onemode} and
\code{dna_network_onemode} objects generated by the \code{\link{dna_network}}
function. In order to use this function, please install the \code{igraph} and
\code{ggraph} packages. Different layouts for one- and two-mode networks are
available.
}
\examples{
\dontrun{
dna_init()
dna_sample()
dna_openDatabase("sample.dna", coderId = 1, coderPassword = "sample")

## one-mode network examples

# compute network matrix (subtract + normalization)
nw <- dna_network(networkType = "onemode",
                  qualifierAggregation = "subtract",
                  normalization = "average")

# plot network
library("ggplot2")
autoplot(nw)

# plot only positively weighted edges
autoplot(nw, threshold = 0)

# congruence network
nw <- dna_network(networkType = "onemode",
                  qualifierAggregation = "congruence",
                  excludeValues = list("concept" =
                    c("There should be legislation to regulate emissions.")))
autoplot(nw)

# use entity colors (here: colors of organizations) from attributes
atts <- dna_getAttributes(variableId = 2)
autoplot(nw, atts = atts, node_colors = "color", layout = "fr")

# use colors from attributes (after editing some of them)
atts$color[atts$Type == "NGO"] <- "red" # change NGO color to red
atts$color[atts$Type == "Government"] <- "blue" # change government to blue
autoplot(nw, atts = atts, node_colors = "color") # plot with custom colors

# use an attribute, such as type, to plot node labels
autoplot(nw, atts = atts, node_label = "Type")

# plot node sizes according to the number of statements of entities;
# first, compute additional matrix to calculate the number of statements
nw_freq <- dna_network(networkType = "twomode",
                       qualifierAggregation = "ignore",
                       normalization = "no")
# then add frequency of statements as an attribute
atts$freq <- rowSums(nw_freq)[match(atts$value, rownames(nw_freq))]
# plot network with node sizes matching statement frequencies
autoplot(nw, atts = atts, node_size = "freq", node_colors = "color")

# use igraph community detection for identification of network clusters;
# remove negative edge weights
nw[nw < 0] <- 0
# convert dna_network to igraph object
graph <- igraph::graph_from_adjacency_matrix(nw,
                                             mode = "undirected",
                                             weighted = TRUE,
                                             diag = FALSE,
                                             add.colnames = NULL,
                                             add.rownames = NA)
# compute communities using igraph cluster algorithms
# (here: fast and greedy as an illustration))
com <- igraph::cluster_fast_greedy(graph)
# add node community membership as an attribute
atts$membership <- com$membership[match(atts$value, com$names)]
# use community membership as node color
autoplot(nw, atts = atts, node_colors = "membership")
# or plot ellipses using ggforce package
library("ggforce")
autoplot(nw, atts = atts, node_colors = "color") +
  geom_mark_ellipse(aes(x = x,
                        y = y,
                        group = com$membership,
                        fill = com$membership),
                    show.legend = FALSE)

# add legend to the network plot (here: colors mapped to type attribute)
autoplot(nw, atts = atts, node_colors = "color") +
  scale_color_identity(name = "",
                       labels = c("Government", "NGO", "Business"),
                       guide = "legend") +
  theme(legend.position = "bottom", # change legend position
        legend.text = element_text(size = 10)) # change legend font size

## two-mode network examples

# compute two-mode network and plot it
nw <- dna_network(networkType = "twomode",
                  qualifierAggregation = "combine")
library("ggplot2")
autoplot(nw)

# use entity colours (here: colors of organizations);
# first, retrieve attributes for first-mode entities (organizations)
atts <- dna_getAttributes(variableId = 2)
# then, retrieve attributes for second-mode entities (concepts)
atts2 <- dna_getAttributes(variableId = 3)
# combine both attribute objects
atts <- rbind(atts, atts2)
# plot the network using the attributes of both variables
autoplot(nw,
         atts = atts,
         node_colors = "color",
         layout = "bipartite",
         max_overlaps = 20)
# edit the colors before plotting
atts$color[atts$Type == "NGO"] <- "red" # change NGO color to red
atts$color[atts$Type == "Government"] <- "blue" # government actors in blue
# plot the network with custom colors
autoplot(nw, atts = atts, node_colors = "color")

# use an attribute, such as type, to plot node labels
nw <- dna_network(networkType = "twomode",
                  qualifierAggregation = "subtract",
                  normalization = "activity")
autoplot(nw, atts = atts, node_label = "Type")

# plot node sizes according the number of statements of entities;
# first, compute network matrix for plotting
nw <- dna_network(networkType = "twomode",
                  qualifierAggregation = "subtract",
                  normalization = "activity")
# compute dna_attributes objects
atts <- dna_getAttributes(variableId = 2)
atts2 <- dna_getAttributes(variableId = 3)
# compute additional matrix to calculate the number of statements
nw_freq <- dna_network(networkType = "twomode",
                       qualifierAggregation = "ignore",
                       normalization = "no")
# add frequency of statements as attribute
# compute statement frequencies of first-mode entities
atts$freq <- rowSums(nw_freq)[match(atts$value, rownames(nw_freq))]
# compute statement frequencies of second-mode entities
atts2$freq <- colSums(nw_freq)[match(atts2$value, colnames(nw_freq))]
# combine both attribute objects
atts <- rbind(atts, atts2)
# plot network with node sizes matching statement frequencies
autoplot(nw, atts = atts, node_size = "freq", node_colors = "color")

# use igraph community detection for identification of network clusters
nw <- dna_network(networkType = "twomode",
                  qualifierAggregation = "subtract",
                  normalization = "activity")
# compute dna_attributes objects and combine them
atts <- dna_getAttributes(variableId = 2)
atts2 <- dna_getAttributes(variableId = 3)
atts <- rbind(atts, atts2)
# remove negative edge weights
nw[nw < 0] <- 0
# convert dna_network to igraph object
graph <- igraph::graph_from_incidence_matrix(nw,
                                             directed = FALSE,
                                             weighted = TRUE,
                                             add.names = NULL)
# compute communities using igraph cluster algorithms
# (here: fast and greedy as an illustration))
com <- igraph::cluster_fast_greedy(graph)
# add node community membership as an attribute
atts$membership <- com$membership[match(atts$value, com$names)]
# use community membership as node color
autoplot(nw, atts = atts, node_colors = "membership")
# or plot ellipses using ggforce
library("ggforce")
autoplot(nw, atts = atts, node_colors = "color") +
  geom_mark_ellipse(aes(x = x,
                    y = y,
                    group = com$membership,
                    fill = com$membership),
                    show.legend = FALSE)
}

}
\seealso{
Other {rDNA networks}: 
\code{\link{as.matrix.dna_network_onemode}()},
\code{\link{as.matrix.dna_network_twomode}()},
\code{\link{dna_network}()},
\code{\link{print.dna_network_onemode}()},
\code{\link{print.dna_network_twomode}()}
}
\author{
Tim Henrichsen
}
\concept{{rDNA networks}}
